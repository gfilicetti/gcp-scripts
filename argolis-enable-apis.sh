#!/bin/bash
# Enable all the most common APIs that will be needed
#
# USAGE: argolis-enable-apis.sh [PROJECT_ID]
# if no project is given, the current gcloud project is used
 
project=${1:-`gcloud config get-value project`}

declare -a apis=(
    # "actions.googleapis.com"
    "admin.googleapis.com"
    # "aiplatform.googleapis.com"
    # "aiui.googleapis.com"
    # "analytics.googleapis.com"
    # "analyticsadmin.googleapis.com"
    # "analyticsdata.googleapis.com"
    # "analyticshub.googleapis.com"
    # "analyticsreporting.googleapis.com"
    "anthos.googleapis.com"
    # "anthosaudit.googleapis.com"
    "anthosconfigmanagement.googleapis.com"
    "anthosgke.googleapis.com"
    # "anthosidentityservice.googleapis.com"
    # "apigateway.googleapis.com"
    "apigee.googleapis.com"
    # "apigeeconnect.googleapis.com"
    # "apikeys.googleapis.com"
    "appengine.googleapis.com"
    "appengineflex.googleapis.com"
    "artifactregistry.googleapis.com"
    # "automl.googleapis.com"
    # "autoscaling.googleapis.com"
    "bigquery.googleapis.com"
    # "bigqueryconnection.googleapis.com"
    # "bigquerydatatransfer.googleapis.com"
    # "bigquerymigration.googleapis.com"
    # "bigqueryreservation.googleapis.com"
    # "bigquerystorage.googleapis.com"
    # "bigtable.googleapis.com"
    # "bigtableadmin.googleapis.com"
    # "bigtabletableadmin.googleapis.com"
    "billingbudgets.googleapis.com"
    # "binaryauthorization.googleapis.com"
    # "certificatemanager.googleapis.com"
    "cloud.googleapis.com"
    "cloudapis.googleapis.com"
    # "cloudasset.googleapis.com"
    # "cloudbilling.googleapis.com"
    "cloudbuild.googleapis.com"
    # "cloudchannel.googleapis.com"
    # "clouddebugger.googleapis.com"
    "clouddeploy.googleapis.com"
    "cloudfunctions.googleapis.com"
    # "cloudidentity.googleapis.com"
    # "cloudiot.googleapis.com"
    # "cloudkms.googleapis.com"
    # "cloudsearch.googleapis.com"
    "cloudshell.googleapis.com"
    # "cloudtasks.googleapis.com"
    # "cloudtrace.googleapis.com"
    # "composer.googleapis.com"
    "compute.googleapis.com"
    "config.googleapis.com"
    # "connectgateway.googleapis.com"
    "container.googleapis.com"
    # "containeranalysis.googleapis.com"
    # "containerfilesystem.googleapis.com"
    # "containerregistry.googleapis.com"
    # "containerscanning.googleapis.com"
    # "containerthreatdetection.googleapis.com"
    # "datacatalog.googleapis.com"
    # "dataconnectors.googleapis.com"
    # "dataflow.googleapis.com"
    # "datafusion.googleapis.com"
    # "datamigration.googleapis.com"
    # "datapipelines.googleapis.com"
    # "dataplex.googleapis.com"
    # "dataproc.googleapis.com"
    # "datastore.googleapis.com"
    # "datastream.googleapis.com"
    # "datastudio.googleapis.com"
    "deploymentmanager.googleapis.com"
    "dns.googleapis.com"
    # "domains.googleapis.com"
    # "endpoints.googleapis.com"
    # "endpointsportal.googleapis.com"
    # "fcm.googleapis.com"
    # "fcmdata.googleapis.com"
    # "firebase.googleapis.com"
    # "firebaseappcheck.googleapis.com"
    # "firebaseappdistribution.googleapis.com"
    # "firebaseapptesters.googleapis.com"
    # "firebasedatabase.googleapis.com"
    # "firebasedynamiclinks.googleapis.com"
    # "firebaseextensions.googleapis.com"
    # "firebasehosting.googleapis.com"
    # "firebaseinappmessaging.googleapis.com"
    # "firebaseinstallations.googleapis.com"
    # "firebaseml.googleapis.com"
    # "firebasepredictions.googleapis.com"
    # "firebaseremoteconfig.googleapis.com"
    # "firebaserules.googleapis.com"
    # "firebasestorage.googleapis.com"
    # "firestore.googleapis.com"
    # "gkebackup.googleapis.com"
    # "gkeconnect.googleapis.com"
    # "gkehub.googleapis.com"
    "gkemulticloud.googleapis.com"
    "iam.googleapis.com"
    # "iamcredentials.googleapis.com"
    "iap.googleapis.com"
    # "memcache.googleapis.com"
    # "mesh.googleapis.com"
    # "meshca.googleapis.com"
    # "metastore.googleapis.com"
    # "multiclusteringress.googleapis.com"
    # "multiclustermetering.googleapis.com"
    # "multiclusterservicediscovery.googleapis.com"
    "networkconnectivity.googleapis.com"
    # "networkmanagement.googleapis.com"
    # "networksecurity.googleapis.com"
    # "networkservices.googleapis.com"
    # "networksubscriptions.googleapis.com"
    # "networktopology.googleapis.com"
    "orgpolicy.googleapis.com"
    # "osconfig.googleapis.com"
    # "oslogin.googleapis.com"
    # "policyanalyzer.googleapis.com"
    # "policysimulator.googleapis.com"
    # "policytroubleshooter.googleapis.com"
    # "pubsub.googleapis.com"
    # "pubsublite.googleapis.com"
    # "recaptchaenterprise.googleapis.com"
    # "redis.googleapis.com"
    # "resourceviews.googleapis.com"
    "run.googleapis.com"
    # "runtimeconfig.googleapis.com"
    # "secretmanager.googleapis.com"
    # "securetoken.googleapis.com"
    # "securitycenter.googleapis.com"
    # "serviceconsumermanagement.googleapis.com"
    # "servicecontrol.googleapis.com"
    # "servicedirectory.googleapis.com"
    # "servicemanagement.googleapis.com"
    # "servicenetworking.googleapis.com"
    # "serviceusage.googleapis.com"
    # "sql-component.googleapis.com"
    # "sqladmin.googleapis.com"
    # "stackdriver.googleapis.com"
    # "sts.googleapis.com"
    # "tpu.googleapis.com"
    # "trafficdirector.googleapis.com"
    # "vault.googleapis.com"
    # "vision.googleapis.com"
    # "vmmigration.googleapis.com"
    # "vmwareengine.googleapis.com"
    "vpcaccess.googleapis.com"
)

for api in "${apis[@]}"
do
    # enable the current API and output how long it took in milliseconds
    echo "Enabling: $api"

    # if on a mac, you need GNU time (`gtime`) installed with: brew install gtime
    # if on regular linux, just use regular `time` instead.
    (gtime -f "%e" gcloud services enable $api --project $project) 2>&1 | xargs printf "Finished in %.0fs\n"

done

